trigger:
  branches:
    include:
      - '*'

pr: none

pool:
  vmImage: 'ubuntu-latest'

resources:
  repositories:
    - repository: input-mapping
      type: github
      endpoint: keboola
      name: keboola/input-mapping
    - repository: staging-provider-erik
      type: github
      endpoint: keboola
      name: keboola/staging-provider-erik
    - repository: output-mapping-erik
      type: github
      endpoint: keboola
      name: keboola/output-mapping-erik

variables:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

stages:
  - stage: build
    displayName: Build
    dependsOn: []
    jobs:
      - job: checkChanges
        displayName: 'Check changes'
        steps:
          - script: |
              ./bin/ci-find-changes.sh \
                inputMapping:libs/input-mapping \
                stagingProvider:libs/staging-provider \
                outputMapping:libs/output-mapping

            displayName: 'Find changes'
            name: findChanges

      - job: build
        displayName: Build Docker Images
        steps:
          - script: docker-compose --profile ci build
            displayName: Build Docker images

          - script: docker image save $(docker image ls --filter 'reference=keboola/*' --format '{{.Repository}}:latest') -o $(Build.ArtifactStagingDirectory)/docker-images.tar
            displayName: Save images as artifact

          - publish: $(Build.ArtifactStagingDirectory)
            artifact: docker-images
            displayName: Publish artifacts

  - stage: tests_input_mapping
    displayName: Tests - Input Mapping
    dependsOn: build
    condition: and(succeeded(), dependencies.build.outputs['checkChanges.findChanges.changedProjects_inputMapping'])
    jobs:
      - template: libs/input-mapping/azure-pipelines.tests.yml

  - stage: tests_output_mapping
    displayName: Tests - Output Mapping
    dependsOn: build
    condition: and(succeeded(), dependencies.build.outputs['checkChanges.findChanges.changedProjects_outputMapping'])
    jobs:
      - template: libs/output-mapping/azure-pipelines.tests.yml

  - stage: tests_staging_provider
    displayName: Tests - Staging Provider
    dependsOn: build
    condition: and(succeeded(), dependencies.build.outputs['checkChanges.findChanges.changedProjects_stagingProvider'])
    jobs:
      - template: libs/staging-provider/azure-pipelines.tests.yml

  - stage: testsResults
    displayName: Wait for tests results
    dependsOn: [ tests_input_mapping, tests_output_mapping, tests_staging_provider ]
    condition: |
      and(
        in(dependencies.tests_input_mapping.result, 'Succeeded', 'Skipped'),
        in(dependencies.tests_output_mapping.result, 'Succeeded', 'Skipped'),
        in(dependencies.tests_staging_provider.result, 'Succeeded', 'Skipped')
      )
    jobs:
      - job:
        steps:
          - script: echo "Tests passed"

  - stage: publishLibraries
    displayName: Publish Libraries
    dependsOn: [ build, testsResults ]
    condition: succeeded('testsResults')
    jobs:
      - template: azure-pipelines/jobs/split-library.yml
        parameters:
          condition: and(succeeded(), stageDependencies.build.checkChanges.outputs['findChanges.changedProjects_inputMapping'])
          sourceRepo: platform-libraries
          targetRepo: input-mapping
          libraryPath: libs/input-mapping
          tagPrefix: input-mapping/
      - template: azure-pipelines/jobs/split-library.yml
        parameters:
          condition: and(succeeded(), stageDependencies.build.checkChanges.outputs['findChanges.changedProjects_stagingProvider'])
          sourceRepo: platform-libraries
          targetRepo: staging-provider-erik
          libraryPath: libs/staging-provider
          tagPrefix: staging-provider/
